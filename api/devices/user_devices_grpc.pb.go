// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: api/devices/user_devices.proto

package devices

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserDeviceServiceClient is the client API for UserDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDeviceServiceClient interface {
	GetUserDevice(ctx context.Context, in *GetUserDeviceRequest, opts ...grpc.CallOption) (*UserDevice, error)
	ListUserDevicesForUser(ctx context.Context, in *ListUserDevicesForUserRequest, opts ...grpc.CallOption) (*ListUserDevicesForUserResponse, error)
}

type userDeviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDeviceServiceClient(cc grpc.ClientConnInterface) UserDeviceServiceClient {
	return &userDeviceServiceClient{cc}
}

func (c *userDeviceServiceClient) GetUserDevice(ctx context.Context, in *GetUserDeviceRequest, opts ...grpc.CallOption) (*UserDevice, error) {
	out := new(UserDevice)
	err := c.cc.Invoke(ctx, "/devices.UserDeviceService/GetUserDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceServiceClient) ListUserDevicesForUser(ctx context.Context, in *ListUserDevicesForUserRequest, opts ...grpc.CallOption) (*ListUserDevicesForUserResponse, error) {
	out := new(ListUserDevicesForUserResponse)
	err := c.cc.Invoke(ctx, "/devices.UserDeviceService/ListUserDevicesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDeviceServiceServer is the server API for UserDeviceService service.
// All implementations must embed UnimplementedUserDeviceServiceServer
// for forward compatibility
type UserDeviceServiceServer interface {
	GetUserDevice(context.Context, *GetUserDeviceRequest) (*UserDevice, error)
	ListUserDevicesForUser(context.Context, *ListUserDevicesForUserRequest) (*ListUserDevicesForUserResponse, error)
	mustEmbedUnimplementedUserDeviceServiceServer()
}

// UnimplementedUserDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserDeviceServiceServer struct {
}

func (UnimplementedUserDeviceServiceServer) GetUserDevice(context.Context, *GetUserDeviceRequest) (*UserDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDevice not implemented")
}
func (UnimplementedUserDeviceServiceServer) ListUserDevicesForUser(context.Context, *ListUserDevicesForUserRequest) (*ListUserDevicesForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserDevicesForUser not implemented")
}
func (UnimplementedUserDeviceServiceServer) mustEmbedUnimplementedUserDeviceServiceServer() {}

// UnsafeUserDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDeviceServiceServer will
// result in compilation errors.
type UnsafeUserDeviceServiceServer interface {
	mustEmbedUnimplementedUserDeviceServiceServer()
}

func RegisterUserDeviceServiceServer(s grpc.ServiceRegistrar, srv UserDeviceServiceServer) {
	s.RegisterService(&UserDeviceService_ServiceDesc, srv)
}

func _UserDeviceService_GetUserDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServiceServer).GetUserDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devices.UserDeviceService/GetUserDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServiceServer).GetUserDevice(ctx, req.(*GetUserDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDeviceService_ListUserDevicesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserDevicesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServiceServer).ListUserDevicesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devices.UserDeviceService/ListUserDevicesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServiceServer).ListUserDevicesForUser(ctx, req.(*ListUserDevicesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDeviceService_ServiceDesc is the grpc.ServiceDesc for UserDeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "devices.UserDeviceService",
	HandlerType: (*UserDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserDevice",
			Handler:    _UserDeviceService_GetUserDevice_Handler,
		},
		{
			MethodName: "ListUserDevicesForUser",
			Handler:    _UserDeviceService_ListUserDevicesForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/devices/user_devices.proto",
}
