// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/rewards/rewards.proto

package rewards

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RewardsServiceClient is the client API for RewardsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RewardsServiceClient interface {
	GetTotalPoints(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTotalPointsResponse, error)
	GetQualifiedDevices(ctx context.Context, in *GetQualifiedDevicesRequest, opts ...grpc.CallOption) (*GetQualifiedDevicesResponse, error)
}

type rewardsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRewardsServiceClient(cc grpc.ClientConnInterface) RewardsServiceClient {
	return &rewardsServiceClient{cc}
}

func (c *rewardsServiceClient) GetTotalPoints(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTotalPointsResponse, error) {
	out := new(GetTotalPointsResponse)
	err := c.cc.Invoke(ctx, "/users.RewardsService/GetTotalPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardsServiceClient) GetQualifiedDevices(ctx context.Context, in *GetQualifiedDevicesRequest, opts ...grpc.CallOption) (*GetQualifiedDevicesResponse, error) {
	out := new(GetQualifiedDevicesResponse)
	err := c.cc.Invoke(ctx, "/users.RewardsService/GetQualifiedDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RewardsServiceServer is the server API for RewardsService service.
// All implementations must embed UnimplementedRewardsServiceServer
// for forward compatibility
type RewardsServiceServer interface {
	GetTotalPoints(context.Context, *emptypb.Empty) (*GetTotalPointsResponse, error)
	GetQualifiedDevices(context.Context, *GetQualifiedDevicesRequest) (*GetQualifiedDevicesResponse, error)
	mustEmbedUnimplementedRewardsServiceServer()
}

// UnimplementedRewardsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRewardsServiceServer struct {
}

func (UnimplementedRewardsServiceServer) GetTotalPoints(context.Context, *emptypb.Empty) (*GetTotalPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalPoints not implemented")
}
func (UnimplementedRewardsServiceServer) GetQualifiedDevices(context.Context, *GetQualifiedDevicesRequest) (*GetQualifiedDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQualifiedDevices not implemented")
}
func (UnimplementedRewardsServiceServer) mustEmbedUnimplementedRewardsServiceServer() {}

// UnsafeRewardsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RewardsServiceServer will
// result in compilation errors.
type UnsafeRewardsServiceServer interface {
	mustEmbedUnimplementedRewardsServiceServer()
}

func RegisterRewardsServiceServer(s grpc.ServiceRegistrar, srv RewardsServiceServer) {
	s.RegisterService(&RewardsService_ServiceDesc, srv)
}

func _RewardsService_GetTotalPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardsServiceServer).GetTotalPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.RewardsService/GetTotalPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardsServiceServer).GetTotalPoints(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardsService_GetQualifiedDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQualifiedDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardsServiceServer).GetQualifiedDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.RewardsService/GetQualifiedDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardsServiceServer).GetQualifiedDevices(ctx, req.(*GetQualifiedDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RewardsService_ServiceDesc is the grpc.ServiceDesc for RewardsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RewardsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.RewardsService",
	HandlerType: (*RewardsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTotalPoints",
			Handler:    _RewardsService_GetTotalPoints_Handler,
		},
		{
			MethodName: "GetQualifiedDevices",
			Handler:    _RewardsService_GetQualifiedDevices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rewards/rewards.proto",
}
